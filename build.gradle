buildscript {
	ext {
		springBootVersion = '1.3.6.RELEASE'
	}
	repositories {
		jcenter()
		maven { url 'http://repo.spring.io/plugins-release' }
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath 'ro.isdc.wro4j.gradle:wro4j-gradle-plugin:1.7.9.Beta2'
		// Provides additional optional and provided dependency configurations for Gradle along with Maven POM generation support.
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
		// classpath 'org.springframework:springloaded:1.2.0.RELEASE'
	}
}

apply plugin: 'java'
apply plugin: 'wro4j'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'propdeps'
apply plugin: 'propdeps-eclipse'

jar {
	baseName = 'demo'
	version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
	mavenCentral()
}


ext {
    versionJQuery = '2.1.4'
    versionBootstrap = '3.3.4'
    versionJasmine = '2.3.4'
	versionAngular = '1.5.8'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	optional("org.springframework.boot:spring-boot-devtools")	// spring boot hot-swapping
	testCompile('org.springframework.boot:spring-boot-starter-test')
	webjars "org.webjars:jquery:$versionJQuery"
    webjars "org.webjars:bootstrap:$versionBootstrap"
    webjars "org.webjars.bower:angularjs:$versionAngular"
}

webResources {
	
	// 将js目录下的js文件压缩合并成core.js
    bundle ('core') {
        js 'js/**/*.js'
        preProcessor 'jsMin'
    }

	// 将jquery合并成libs.js
    bundle ('libs') {
        js "webjars/jquery/$versionJQuery/jquery.min.js"
        js "webjars/angularjs/$versionAngular/angular.js"
    }

	// 编译less、合并css
    bundle ('theme-default') {
        css "webjars/bootstrap/$versionBootstrap/less/bootstrap.less"
//        css 'themes/default/main.css'
		css 'themes/default/*.css'

        cssOverrideImport "variables.less", "../../../../themes/default/variables.less"
        preProcessor 'less4j'
        cssRewriteUrl()
    }

    assets {
        include 'themes/default/images/**'
    }

    testAssets {
        from (srcTestDir) {
            exclude '*SpecRunner.html'
            exclude '*.conf.js'
        }

        from (srcTestDir) {
            include '*SpecRunner.html'
            include '*.conf.js'

            expand([
                'srcMain': buildMainUri,
                'srcTest': buildTestUri,
                'webjarJasmine': "$buildTestUri/webjars/jasmine/$versionJasmine"
            ])
        }
    }
}
  
eclipse {
	classpath {
		 containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
		 containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7'
		 
		 file {
//			  设置eclipse中java、resource的output与gradle java插件的output一致，方便eclipse开发调试
//			  设置如下：
//			 <classpathentry output="build\classes\main" kind="src" path="src/main/java"/>
//			 <classpathentry output="build\resources\main" kind="src" path="src/main/resources"/>
//			 <classpathentry output="build\classes\test" kind="src" path="src/test/java"/>
			 whenMerged { classpath ->
			   sourceSets.each {source->
				   classpath.entries.findAll { entry -> entry.kind == 'src' && source.java.srcDirs.any{ it == entry.dir}}
				   .collect{entry -> entry.output = relativePath(source.output.classesDir)}
				   classpath.entries.findAll { entry -> entry.kind == 'src' && source.resources.srcDirs.any{ it == entry.dir }}
				   .collect{entry -> entry.output = relativePath(source.output.resourcesDir)}
			   }
			 }
		   }
		 }
	}
